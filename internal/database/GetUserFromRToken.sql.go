// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: GetUserFromRToken.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getUserFromRToken = `-- name: GetUserFromRToken :one
SELECT id, users.created_at, users.updated_at, email, hashed_password, is_chirpy_red, username, token, refresh_tokens.created_at, refresh_tokens.updated_at, user_id, expires_at, revoked_at FROM users
INNER JOIN refresh_tokens
ON users.id = refresh_tokens.user_id
WHERE refresh_tokens.token = $1
AND refresh_tokens.expires_at > NOW()
AND refresh_tokens.revoked_at IS NULL
`

type GetUserFromRTokenRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword sql.NullString
	IsChirpyRed    sql.NullBool
	Username       string
	Token          string
	CreatedAt_2    time.Time
	UpdatedAt_2    time.Time
	UserID         uuid.UUID
	ExpiresAt      time.Time
	RevokedAt      sql.NullTime
}

func (q *Queries) GetUserFromRToken(ctx context.Context, token string) (GetUserFromRTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRToken, token)
	var i GetUserFromRTokenRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
		&i.Username,
		&i.Token,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
